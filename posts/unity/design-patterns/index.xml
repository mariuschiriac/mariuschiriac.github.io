<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on Marius Chiriac</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/</link><description>Recent content in Design Patterns on Marius Chiriac</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Dec 2020 06:15:55 +0000</lastBuildDate><atom:link href="https://mariuschiriac.github.io/posts/unity/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Chain of Responsibility Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</link><pubDate>Sun, 06 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</guid><description>Behavioural Design Pattern applied on unity
Pattern explenation Intent Avoid coupling between the sender of a request and the recipient, allowing more than a single object to hear the request. Concatenate the recipient objects and pass the request of object in object until one of these fails to fulfill it.
Applications more than one object can handle a request and the receiver who will handle it is not known a priori.</description></item><item><title>Commmand Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</guid><description>Behavioural Pattern.
Pattern explenation Intent Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations.
What it solve Need to issue requests to objects without knowing anything about the operation being requested or the receiver of the request.
Applications To parameterize objects with respect to an action to be performed To specify, queue and execute requests at different times To allow the cancellation of operations To organize a system into high-level operations which are themselves based on primitive operations Actors Command Specifies an interface for performing a generic operation ConcreteCommand Defines a link between a target object and an action Implement the Execute method by invoking the corresponding method (s) on the Receiver Keeps the data of the action Client Create a concrete instance of Command and set its Receiver Invoker Asks Command to complete the request Keeps the history of ConcreteCommand used Receiver Knows the way to perform the operations associated with a request.</description></item><item><title>Component Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/component/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/component/</guid><description>Game Programming Pattern.
Pattern explenation Intent Allow a single entity to span multiple domains without coupling the domains to each other
What it solve The creation of big classes that are hard to mantain.
Applications You have a class that touches multiple domains which you want to keep decoupled from each other. A class is getting massive and hard to work with You want to be able to define a variety of objects that share different capabilities, but using inheritance doesnâ€™t let you pick the parts you want to reuse precisely enough.</description></item><item><title>Object Pool Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/object_pool/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/object_pool/</guid><description>Behavioural Pattern.
Pattern explenation Intent Improve performance and memory use by reusing objects from a fixed pool instead of allocating and freeing them individually.
What it solve Management of list of the same object type
Applications To frequently create and destroy objects. Objects are similar in size. Allocating objects on the heap is slow or could lead to memory fragmentation. Each object encapsulates a resource such as a database or network connection that is expensive to acquire and could be reused.</description></item></channel></rss>