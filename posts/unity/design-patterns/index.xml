<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design Patterns on Marius Chiriac</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/</link><description>Recent content in Design Patterns on Marius Chiriac</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 03 Dec 2020 06:15:55 +0000</lastBuildDate><atom:link href="https://mariuschiriac.github.io/posts/unity/design-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Commmand Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</guid><description>In this guide we will see how to integrate javascript functions in unity game with WEBGL build
Pattern explenation Intent Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations.
What it solve Need to issue requests to objects without knowing anything about the operation being requested or the receiver of the request.
Applications To parameterize objects with respect to an action to be performed To specify, queue and execute requests at different times To allow the cancellation of operations To organize a system into high-level operations which are themselves based on primitive operations Actors Command Specifies an interface for performing a generic operation ConcreteCommand Defines a link between a target object and an action Implement the Execute method by invoking the corresponding method (s) on the Receiver Keeps the data of the action Client Create a concrete instance of Command and set its Receiver Invoker Asks Command to complete the request Keeps the history of ConcreteCommand used Receiver Knows the way to perform the operations associated with a request.</description></item><item><title/><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</guid><description>Spiegazione del Pattern Scopo Incapsula una richiesta in un oggetto, consentendo di parametrizzare i clientcon richieste diverse, accodare o mantenere uno storico delle richieste e gestire richieste cancellabili
Cosa risolve Il bisogno di inviare richieste a oggetti senza conoscere nulla riguardo all&amp;rsquo;operazione che è stata richiesta o chi la riceve.
Applicabilità Per parametrizzare gli oggetti rispetto a un&amp;rsquo;azione da compiere Per specificare, accodare ed eseguire le richieste in tempi diversi Per consentire l&amp;rsquo;annullamento di operazioni Per organizzare un sistema in operazioni d&amp;rsquo;alto livello a loro volta basate su operazioni primitive Partecipanti Command Specifica un&amp;rsquo;interfaccia per l&amp;rsquo;esecuzione di un&amp;rsquo;operazione generica ConcreteCommand Definisce un legame fra un oggetto destinatario e un&amp;rsquo;azione Implementa il metodo Execute invocando il metodo (i metodi) corrispondente sul Receiver Client Crea un&amp;rsquo;istanza concreta di Command e ne imposta il Receiver Invoker Chiede a Command di portare a termine la richiesta Receiver Conosce il modo di svolgere le operazioni associate a una richiesta.</description></item></channel></rss>