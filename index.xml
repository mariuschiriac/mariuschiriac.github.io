<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marius Chiriac</title><link>https://mariuschiriac.github.io/</link><description>Recent content on Marius Chiriac</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Dec 2020 06:15:55 +0000</lastBuildDate><atom:link href="https://mariuschiriac.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Chain of Responsibility Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</link><pubDate>Sun, 06 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</guid><description>Behavioural Design Pattern applied on unity
Pattern explenation Intent Avoid coupling between the sender of a request and the recipient, allowing more than a single object to hear the request. Concatenate the recipient objects and pass the request of object in object until one of these fails to fulfill it.
Applications more than one object can handle a request and the receiver who will handle it is not known a priori.</description></item><item><title>Commmand Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</guid><description>In this guide we will see how to integrate javascript functions in unity game with WEBGL build
Pattern explenation Intent Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations.
What it solve Need to issue requests to objects without knowing anything about the operation being requested or the receiver of the request.
Applications To parameterize objects with respect to an action to be performed To specify, queue and execute requests at different times To allow the cancellation of operations To organize a system into high-level operations which are themselves based on primitive operations Actors Command Specifies an interface for performing a generic operation ConcreteCommand Defines a link between a target object and an action Implement the Execute method by invoking the corresponding method (s) on the Receiver Keeps the data of the action Client Create a concrete instance of Command and set its Receiver Invoker Asks Command to complete the request Keeps the history of ConcreteCommand used Receiver Knows the way to perform the operations associated with a request.</description></item><item><title>Integration of javascript in Unity WEBGL build</title><link>https://mariuschiriac.github.io/posts/unity/webgl_integration/</link><pubDate>Sun, 29 Nov 2020 10:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/unity/webgl_integration/</guid><description>In this guide we will see how to integrate javascript functions in unity game with WEBGL build
Workflow from unity script call a plugin that comunicate to the script where the build is placed the plugin function have only the work to call a javascript function of site environment change the javascript function without rebuilding everytime Create the plugin plugin.jslib
var plugin = { CallFunction: function() { CustomFunction(); } }; mergeInto(LibraryManager.</description></item><item><title>Cookies in development using localhost</title><link>https://mariuschiriac.github.io/posts/client-server/cookies/</link><pubDate>Thu, 26 Nov 2020 06:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/client-server/cookies/</guid><description>In this guide we will see how to config server backend with nodejs and exrepress to test cookies in localhost
Keep In Mind cookies are created server-side the client doesn&amp;rsquo;t handle cookies cookies are saved on the browser server can read the cookies from the client request Setup backend index.js
const express = require('express'); const bodyParser = require('body-parser'); const webpush = require('web-push'); const cors = require('cors'); const cookieParser = require('cookie-parser'); const https = require('https'); const fs = require('fs'); const Auth = require('.</description></item><item><title>Prepare Your Site</title><link>https://mariuschiriac.github.io/posts/getting-started/prepare-site/</link><pubDate>Mon, 08 Jun 2020 23:00:20 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/getting-started/prepare-site/</guid><description>Greeting! Thank you for deciding to use this theme. In this post, we are going to create a hugo site from scratch. Then, we will configure it with Toha theme, make it multilingual, add some example posts. At the end of this post, you should be able to run a fully functional hugo site with Toha theme locally.
If you want a head start, you can just fork hugo-toha/hugo-toha.github.io repo, rename it and update with your own data.</description></item><item><title>Deploy site in Github Pages</title><link>https://mariuschiriac.github.io/posts/getting-started/github-pages/</link><pubDate>Mon, 08 Jun 2020 22:00:20 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/getting-started/github-pages/</guid><description>In this post, we are going to deploy the site we have created in previous post in Github Pages. At first, make sure that your repository name is &amp;lt;your username&amp;gt;.github.io. Then, commit any local uncommitted changes and push into Github.
Setup Default Branch GitHub don&amp;rsquo;t serve a site from hugo templates directly. Instead, we have to provide the generated (HTML, CSS, JS etc.) files after building the site. From now, we are going to maintain two branches for our site.</description></item><item><title>Deploy site in Netlify</title><link>https://mariuschiriac.github.io/posts/getting-started/netlify/</link><pubDate>Mon, 08 Jun 2020 21:00:15 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/getting-started/netlify/</guid><description>Netlify offers an excellent and easy process for deploying hugo static site. You can deploy your site in matter of few clicks. Unlike Github Pages, you can name your repository whatever you want. You can also customize the site URL.
In this post, we will show the step by step process of deploying a hugo site with netlify.
Add Netlify Configuration At first, create a netlify.toml file at the root of your repository and add the following configuration there:</description></item><item><title>Automate Theme Update</title><link>https://mariuschiriac.github.io/posts/getting-started/theme-update/</link><pubDate>Mon, 08 Jun 2020 20:00:15 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/getting-started/theme-update/</guid><description>You might want to keep your site up-to-date with the latest version of theme to enjoy the latest features and fixes. In this post, we are going to setup a Dependabot Github app to automatically update the theme version. The app will check daily if there is any update in the submodules. If it finds any update in the theme, it will create a PR updating your site to the latest theme version.</description></item><item><title>Creating Category</title><link>https://mariuschiriac.github.io/posts/writing-posts/category/creating-category/</link><pubDate>Mon, 08 Jun 2020 06:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/category/creating-category/</guid><description>First, we need to understand how to create a post then we will be able to create categories.
Post Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines:
--- title: Posts --- now, save and close the file.</description></item><item><title>Creating Sub Category</title><link>https://mariuschiriac.github.io/posts/writing-posts/category/sub-category/creating-sub-category/</link><pubDate>Mon, 08 Jun 2020 06:15:50 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/category/sub-category/creating-sub-category/</guid><description>Complete Post Coming Soon&amp;hellip;</description></item><item><title>Markdown Syntax Guide</title><link>https://mariuschiriac.github.io/posts/writing-posts/markdown-syntax-guide/</link><pubDate>Mon, 08 Jun 2020 06:15:40 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Using Emoji</title><link>https://mariuschiriac.github.io/posts/writing-posts/using-emoji/</link><pubDate>Mon, 08 Jun 2020 06:15:25 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/using-emoji/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item><item><title>Analytics and Comments</title><link>https://mariuschiriac.github.io/posts/analytics-and-comments/</link><pubDate>Mon, 08 Jun 2020 06:00:23 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/analytics-and-comments/</guid><description>Complete Post Coming Soon&amp;hellip;</description></item><item><title/><link>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility_iit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility_iit/</guid><description>Pattern explenation Intent Evitare l&amp;rsquo;accoppiamento fra il mittente di una richiesta e il destinatario, consentendo che più di un singolo oggetto possa essaudire la richiesta. Concatenare gli oggetti destinatari e passare la richiesta di oggetto in oggetto finchè uno di questi non riesce ad esaudirla.
Applications più di un oggetto può gestire una richiesta e l ricevente che la gestirà non è conosciuto a priori. Il ricevente dovrebbe essere scelto in modo automatico; si vuole passare una richiesta a uno dei molti oggetti, senza specificare esplicitamente il ricevente; l&amp;rsquo;insieme di oggetti che gestirà una richiesta deve essere definito dinamicamente.</description></item><item><title/><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</guid><description>Spiegazione del Pattern Scopo Incapsula una richiesta in un oggetto, consentendo di parametrizzare i clientcon richieste diverse, accodare o mantenere uno storico delle richieste e gestire richieste cancellabili
Cosa risolve Il bisogno di inviare richieste a oggetti senza conoscere nulla riguardo all&amp;rsquo;operazione che è stata richiesta o chi la riceve.
Applicabilità Per parametrizzare gli oggetti rispetto a un&amp;rsquo;azione da compiere Per specificare, accodare ed eseguire le richieste in tempi diversi Per consentire l&amp;rsquo;annullamento di operazioni Per organizzare un sistema in operazioni d&amp;rsquo;alto livello a loro volta basate su operazioni primitive Partecipanti Command Specifica un&amp;rsquo;interfaccia per l&amp;rsquo;esecuzione di un&amp;rsquo;operazione generica ConcreteCommand Definisce un legame fra un oggetto destinatario e un&amp;rsquo;azione Implementa il metodo Execute invocando il metodo (i metodi) corrispondente sul Receiver Client Crea un&amp;rsquo;istanza concreta di Command e ne imposta il Receiver Invoker Chiede a Command di portare a termine la richiesta Receiver Conosce il modo di svolgere le operazioni associate a una richiesta.</description></item></channel></rss>