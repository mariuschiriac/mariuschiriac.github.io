<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marius Chiriac</title><link>https://mariuschiriac.github.io/</link><description>Recent content on Marius Chiriac</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mariuschiriac.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>React: Migrate Javascript to Typescript</title><link>https://mariuschiriac.github.io/posts/react/migrate_js_ts/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/react/migrate_js_ts/</guid><description>In this guide we will see how to migrate a website with react from javascript to typescript
Why Typescript Code suggestions: Typescript offers suggestions and options while you type. This saves a lot of effort and makes it easier for a new developer to use your source code. These code suggestions prevent wasted time, ease team communication, and make your codebase more consistent.
Readability and validation: Since Typescript is a statically-typed system, you can add types to variables, functions, and properties, making your code far easier to read.</description></item><item><title>Node: Migrate Javascript to Typescript</title><link>https://mariuschiriac.github.io/posts/client-server/migrate_js_ts/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/client-server/migrate_js_ts/</guid><description>In this guide we will see how to migrate a backend server with node.js 14 and express from javascript to typescript
Why Typescript help developer to write consistent code makes code easier to read and to mantain Converting project The first step is to add the TypeScript compiler. You can install the compiler as a developer dependency using the &amp;ndash;save-dev flag.
npm install --save-dev typescript Based on this tsconfig.</description></item><item><title>Chain of Responsibility Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</link><pubDate>Sun, 06 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility/</guid><description>Behavioural Design Pattern applied on unity
Pattern explenation Intent Avoid coupling between the sender of a request and the recipient, allowing more than a single object to hear the request. Concatenate the recipient objects and pass the request of object in object until one of these fails to fulfill it.
Applications more than one object can handle a request and the receiver who will handle it is not known a priori.</description></item><item><title>Commmand Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command/</guid><description>Behavioural Pattern.
Pattern explenation Intent Encapsulate a request as an object, thereby letting you parametrize clients with different requests, queue or log requests, and support undoable operations.
What it solve Need to issue requests to objects without knowing anything about the operation being requested or the receiver of the request.
Applications To parameterize objects with respect to an action to be performed To specify, queue and execute requests at different times To allow the cancellation of operations To organize a system into high-level operations which are themselves based on primitive operations Actors Command Specifies an interface for performing a generic operation ConcreteCommand Defines a link between a target object and an action Implement the Execute method by invoking the corresponding method (s) on the Receiver Keeps the data of the action Client Create a concrete instance of Command and set its Receiver Invoker Asks Command to complete the request Keeps the history of ConcreteCommand used Receiver Knows the way to perform the operations associated with a request.</description></item><item><title>Component Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/component/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/component/</guid><description>Game Programming Pattern.
Pattern explenation Intent Allow a single entity to span multiple domains without coupling the domains to each other
What it solve The creation of big classes that are hard to mantain.
Applications You have a class that touches multiple domains which you want to keep decoupled from each other. A class is getting massive and hard to work with You want to be able to define a variety of objects that share different capabilities, but using inheritance doesnâ€™t let you pick the parts you want to reuse precisely enough.</description></item><item><title>Object Pool Pattern</title><link>https://mariuschiriac.github.io/posts/unity/design-patterns/object_pool/</link><pubDate>Thu, 03 Dec 2020 06:15:55 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/object_pool/</guid><description>Behavioural Pattern.
Pattern explenation Intent Improve performance and memory use by reusing objects from a fixed pool instead of allocating and freeing them individually.
What it solve Management of list of the same object type
Applications To frequently create and destroy objects. Objects are similar in size. Allocating objects on the heap is slow or could lead to memory fragmentation. Each object encapsulates a resource such as a database or network connection that is expensive to acquire and could be reused.</description></item><item><title>Integration of javascript in Unity WEBGL build</title><link>https://mariuschiriac.github.io/posts/unity/webgl_integration/</link><pubDate>Sun, 29 Nov 2020 10:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/unity/webgl_integration/</guid><description>In this guide we will see how to integrate javascript functions in unity game with WEBGL build
Workflow from unity script call a plugin that comunicate to the script where the build is placed the plugin function have only the work to call a javascript function of site environment change the javascript function without rebuilding everytime Create the plugin plugin.jslib
var plugin = { CallFunction: function() { CustomFunction(); } }; mergeInto(LibraryManager.</description></item><item><title>Cookies in development using localhost</title><link>https://mariuschiriac.github.io/posts/client-server/cookies/</link><pubDate>Thu, 26 Nov 2020 06:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/client-server/cookies/</guid><description>In this guide we will see how to config server backend with nodejs and exrepress to test cookies in localhost
Keep In Mind cookies are created server-side the client doesn&amp;rsquo;t handle cookies cookies are saved on the browser server can read the cookies from the client request Setup backend index.js
const express = require('express'); const bodyParser = require('body-parser'); const webpush = require('web-push'); const cors = require('cors'); const cookieParser = require('cookie-parser'); const https = require('https'); const fs = require('fs'); const Auth = require('.</description></item><item><title>Creating Category</title><link>https://mariuschiriac.github.io/posts/writing-posts/category/creating-category/</link><pubDate>Mon, 08 Jun 2020 06:15:55 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/category/creating-category/</guid><description>First, we need to understand how to create a post then we will be able to create categories.
Post Creation To create a post in your blog first you need to go to the folder named posts. Here, create a file _index.md(The file name has to be exactly the same as it is mentioned). Then open the file and add below lines:
--- title: Posts --- now, save and close the file.</description></item><item><title>Creating Sub Category</title><link>https://mariuschiriac.github.io/posts/writing-posts/category/sub-category/creating-sub-category/</link><pubDate>Mon, 08 Jun 2020 06:15:50 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/category/sub-category/creating-sub-category/</guid><description>Complete Post Coming Soon&amp;hellip;</description></item><item><title>Markdown Syntax Guide</title><link>https://mariuschiriac.github.io/posts/writing-posts/markdown-syntax-guide/</link><pubDate>Mon, 08 Jun 2020 06:15:40 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/markdown-syntax-guide/</guid><description>&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p></description></item><item><title>Using Emoji</title><link>https://mariuschiriac.github.io/posts/writing-posts/using-emoji/</link><pubDate>Mon, 08 Jun 2020 06:15:25 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/writing-posts/using-emoji/</guid><description>&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p></description></item><item><title>Analytics and Comments</title><link>https://mariuschiriac.github.io/posts/analytics-and-comments/</link><pubDate>Mon, 08 Jun 2020 06:00:23 +0600</pubDate><guid>https://mariuschiriac.github.io/posts/analytics-and-comments/</guid><description>Complete Post Coming Soon&amp;hellip;</description></item><item><title/><link>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility_iit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/chain_of_responsibility_iit/</guid><description>Pattern explenation Intent Evitare l&amp;rsquo;accoppiamento fra il mittente di una richiesta e il destinatario, consentendo che piÃ¹ di un singolo oggetto possa essaudire la richiesta. Concatenare gli oggetti destinatari e passare la richiesta di oggetto in oggetto finchÃ¨ uno di questi non riesce ad esaudirla.
Applications piÃ¹ di un oggetto puÃ² gestire una richiesta e l ricevente che la gestirÃ  non Ã¨ conosciuto a priori. Il ricevente dovrebbe essere scelto in modo automatico; si vuole passare una richiesta a uno dei molti oggetti, senza specificare esplicitamente il ricevente; l&amp;rsquo;insieme di oggetti che gestirÃ  una richiesta deve essere definito dinamicamente.</description></item><item><title/><link>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mariuschiriac.github.io/posts/unity/design-patterns/command_it/</guid><description>Spiegazione del Pattern Scopo Incapsula una richiesta in un oggetto, consentendo di parametrizzare i clientcon richieste diverse, accodare o mantenere uno storico delle richieste e gestire richieste cancellabili
Cosa risolve Il bisogno di inviare richieste a oggetti senza conoscere nulla riguardo all&amp;rsquo;operazione che Ã¨ stata richiesta o chi la riceve.
ApplicabilitÃ  Per parametrizzare gli oggetti rispetto a un&amp;rsquo;azione da compiere Per specificare, accodare ed eseguire le richieste in tempi diversi Per consentire l&amp;rsquo;annullamento di operazioni Per organizzare un sistema in operazioni d&amp;rsquo;alto livello a loro volta basate su operazioni primitive Partecipanti Command Specifica un&amp;rsquo;interfaccia per l&amp;rsquo;esecuzione di un&amp;rsquo;operazione generica ConcreteCommand Definisce un legame fra un oggetto destinatario e un&amp;rsquo;azione Implementa il metodo Execute invocando il metodo (i metodi) corrispondente sul Receiver Client Crea un&amp;rsquo;istanza concreta di Command e ne imposta il Receiver Invoker Chiede a Command di portare a termine la richiesta Receiver Conosce il modo di svolgere le operazioni associate a una richiesta.</description></item></channel></rss>